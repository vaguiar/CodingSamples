
public class InversionCounter {

	//Globally just store just one count variable.
	private static int inversionCount = 0;
	
	//Getter for the "inversionCount"
	public int getInversionCount(){
		return inversionCount;
	}
	
	//Divide step of the Fast Divide-Conquer Algo
	public void CountInversionAndSort(int [] input, int left_index, int right_index){
		
		int middle_index = (left_index + right_index)/2;
		
		if(middle_index < right_index){
			CountInversionAndSort(input, left_index, middle_index);
			CountInversionAndSort(input, middle_index + 1, right_index);
			MergeAndCount(input, left_index, middle_index, right_index);
		}		
	}
	
	//Conquer step for the Fast Divide-Conquer Algo
	public void MergeAndCount(int [] input, int left, int middle, int right){
		
		// Temp arrays to hold the intermediate unsorted values.
		// final sorted values are placed in the org input array itself.
		int [] temp_arr1 = new int[middle-left+1];
		int [] temp_arr2 = new int[right-middle];
		
		for(int i = 0; i < temp_arr1.length; i++){
			temp_arr1[i] = input[left + i];
		}
		
		for(int i = 0; i < temp_arr2.length; i++){
			temp_arr2[i] = input[middle+1 + i];
		}
		
		
	}
}
